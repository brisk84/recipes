// Code generated by mockery v2.24.0. DO NOT EDIT.

package usecase

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// filestorageMock is an autogenerated mock type for the filestorage type
type filestorageMock struct {
	mock.Mock
}

// Download provides a mock function with given fields: ctx, fileName
func (_m *filestorageMock) Download(ctx context.Context, fileName string) (io.Reader, error) {
	ret := _m.Called(ctx, fileName)

	var r0 io.Reader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (io.Reader, error)); ok {
		return rf(ctx, fileName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) io.Reader); ok {
		r0 = rf(ctx, fileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upload provides a mock function with given fields: ctx, fileName, fileSize, reader
func (_m *filestorageMock) Upload(ctx context.Context, fileName string, fileSize int64, reader io.Reader) error {
	ret := _m.Called(ctx, fileName, fileSize, reader)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, io.Reader) error); ok {
		r0 = rf(ctx, fileName, fileSize, reader)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewFilestorageMock interface {
	mock.TestingT
	Cleanup(func())
}

// newFilestorageMock creates a new instance of filestorageMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newFilestorageMock(t mockConstructorTestingTnewFilestorageMock) *filestorageMock {
	mock := &filestorageMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
