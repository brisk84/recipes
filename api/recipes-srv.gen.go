// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/gorilla/mux"
)

// Defines values for QuerySortByRating.
const (
	QuerySortByRatingAsc  QuerySortByRating = "asc"
	QuerySortByRatingDesc QuerySortByRating = "desc"
)

// Defines values for QuerySortByTime.
const (
	QuerySortByTimeAsc  QuerySortByTime = "asc"
	QuerySortByTimeDesc QuerySortByTime = "desc"
)

// Id defines model for Id.
type Id struct {
	Id openapi_types.UUID `json:"id"`
}

// Query defines model for Query.
type Query struct {
	Ingredients  *[]string          `json:"ingredients,omitempty"`
	MaxTime      *int               `json:"max_time,omitempty"`
	MinRating    *float64           `json:"min_rating,omitempty"`
	SortByRating *QuerySortByRating `json:"sort_by_rating,omitempty"`
	SortByTime   *QuerySortByTime   `json:"sort_by_time,omitempty"`
}

// QuerySortByRating defines model for Query.SortByRating.
type QuerySortByRating string

// QuerySortByTime defines model for Query.SortByTime.
type QuerySortByTime string

// Recipe defines model for Recipe.
type Recipe struct {
	Description string   `json:"description"`
	Ingredients []string `json:"ingredients"`
	Rating      *float64 `json:"rating,omitempty"`
	Steps       []Step   `json:"steps"`
	Title       string   `json:"title"`
	TotalTime   int      `json:"total_time"`
}

// RecipeForList defines model for RecipeForList.
type RecipeForList struct {
	Id    openapi_types.UUID `json:"id"`
	Title string             `json:"title"`
}

// RecipeWithId defines model for RecipeWithId.
type RecipeWithId struct {
	Description string             `json:"description"`
	Id          openapi_types.UUID `json:"id"`
	Ingredients []string           `json:"ingredients"`
	Rating      *float64           `json:"rating,omitempty"`
	Steps       []Step             `json:"steps"`
	Title       string             `json:"title"`
	TotalTime   int                `json:"total_time"`
}

// Recipes defines model for Recipes.
type Recipes struct {
	Items *[]RecipeWithId `json:"items,omitempty"`
}

// RecipesForList defines model for RecipesForList.
type RecipesForList struct {
	Items *[]RecipeForList `json:"items,omitempty"`
}

// Step defines model for Step.
type Step struct {
	Time  int    `json:"time"`
	Title string `json:"title"`
}

// User defines model for User.
type User struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

// Vote defines model for Vote.
type Vote struct {
	Mark     int    `json:"mark"`
	RecipeId string `json:"recipe_id"`
}

// PostApiRecipeCUploadMultipartBody defines parameters for PostApiRecipeCUpload.
type PostApiRecipeCUploadMultipartBody struct {
	File     *openapi_types.File `json:"file,omitempty"`
	RecipeId *string             `json:"recipe_id,omitempty"`
}

// PostApiRecipeCCreateJSONRequestBody defines body for PostApiRecipeCCreate for application/json ContentType.
type PostApiRecipeCCreateJSONRequestBody = Recipe

// PostApiRecipeCDeleteJSONRequestBody defines body for PostApiRecipeCDelete for application/json ContentType.
type PostApiRecipeCDeleteJSONRequestBody = Id

// PostApiRecipeCUpdateJSONRequestBody defines body for PostApiRecipeCUpdate for application/json ContentType.
type PostApiRecipeCUpdateJSONRequestBody = RecipeWithId

// PostApiRecipeCUploadMultipartRequestBody defines body for PostApiRecipeCUpload for multipart/form-data ContentType.
type PostApiRecipeCUploadMultipartRequestBody PostApiRecipeCUploadMultipartBody

// PostApiRecipeCVoteJSONRequestBody defines body for PostApiRecipeCVote for application/json ContentType.
type PostApiRecipeCVoteJSONRequestBody = Vote

// PostApiRecipeQFindJSONRequestBody defines body for PostApiRecipeQFind for application/json ContentType.
type PostApiRecipeQFindJSONRequestBody = Query

// PostApiRecipeQReadJSONRequestBody defines body for PostApiRecipeQRead for application/json ContentType.
type PostApiRecipeQReadJSONRequestBody = Recipe

// PostApiUserCSigninJSONRequestBody defines body for PostApiUserCSignin for application/json ContentType.
type PostApiUserCSigninJSONRequestBody = User

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create recipe
	// (POST /api/recipe/c/create)
	PostApiRecipeCCreate(w http.ResponseWriter, r *http.Request)
	// Update recipe
	// (POST /api/recipe/c/delete)
	PostApiRecipeCDelete(w http.ResponseWriter, r *http.Request)
	// Update recipe
	// (POST /api/recipe/c/update)
	PostApiRecipeCUpdate(w http.ResponseWriter, r *http.Request)
	// Upload recipe photo
	// (POST /api/recipe/c/upload)
	PostApiRecipeCUpload(w http.ResponseWriter, r *http.Request)
	// Vote for recipe
	// (POST /api/recipe/c/vote)
	PostApiRecipeCVote(w http.ResponseWriter, r *http.Request)
	// Find recipe
	// (POST /api/recipe/q/find)
	PostApiRecipeQFind(w http.ResponseWriter, r *http.Request)
	// List recipes
	// (POST /api/recipe/q/list)
	PostApiRecipeQList(w http.ResponseWriter, r *http.Request)
	// Read recipe
	// (POST /api/recipe/q/read)
	PostApiRecipeQRead(w http.ResponseWriter, r *http.Request)
	// Sign in
	// (POST /api/user/c/signin)
	PostApiUserCSignin(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// PostApiRecipeCCreate operation middleware
func (siw *ServerInterfaceWrapper) PostApiRecipeCCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiRecipeCCreate(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostApiRecipeCDelete operation middleware
func (siw *ServerInterfaceWrapper) PostApiRecipeCDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiRecipeCDelete(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostApiRecipeCUpdate operation middleware
func (siw *ServerInterfaceWrapper) PostApiRecipeCUpdate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiRecipeCUpdate(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostApiRecipeCUpload operation middleware
func (siw *ServerInterfaceWrapper) PostApiRecipeCUpload(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiRecipeCUpload(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostApiRecipeCVote operation middleware
func (siw *ServerInterfaceWrapper) PostApiRecipeCVote(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiRecipeCVote(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostApiRecipeQFind operation middleware
func (siw *ServerInterfaceWrapper) PostApiRecipeQFind(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiRecipeQFind(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostApiRecipeQList operation middleware
func (siw *ServerInterfaceWrapper) PostApiRecipeQList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiRecipeQList(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostApiRecipeQRead operation middleware
func (siw *ServerInterfaceWrapper) PostApiRecipeQRead(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiRecipeQRead(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostApiUserCSignin operation middleware
func (siw *ServerInterfaceWrapper) PostApiUserCSignin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiUserCSignin(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/api/recipe/c/create", wrapper.PostApiRecipeCCreate).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/recipe/c/delete", wrapper.PostApiRecipeCDelete).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/recipe/c/update", wrapper.PostApiRecipeCUpdate).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/recipe/c/upload", wrapper.PostApiRecipeCUpload).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/recipe/c/vote", wrapper.PostApiRecipeCVote).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/recipe/q/find", wrapper.PostApiRecipeQFind).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/recipe/q/list", wrapper.PostApiRecipeQList).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/recipe/q/read", wrapper.PostApiRecipeQRead).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/user/c/signin", wrapper.PostApiUserCSignin).Methods("POST")

	return r
}
